---
import '../../styles/components/others/terminal.styl';
import { Image } from "astro:assets";
import linuxPixel from "../../images/linux-pixel.png";
---

<!-- Terminal Fake -->
<section class="containerTerminal">
<div class="terminal" id="terminal">
  <div class="output" id="output"></div>
  <div class="input-line">
    <span class="prompt">&gt;</span>
    <input type="text" id="cmdInput" placeholder='Type "help"' />
  </div>

  <Image src={linuxPixel} alt="gif-yw4rf" class="tuxProjects" />
</div>
<div class="buttonHome">
<a href="/projects">
    <button class="portfolio-button">
       Projects <span class="arrow">&gt;</span>
    </button>
    </a>
    </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const input = document.getElementById('cmdInput');
  const output = document.getElementById('output');

  const fileSystem = {
    '/': {
      type: 'dir',
      content: {
        'readme.txt': { type: 'file', content: 'Hii, use "help" command to check available commands.\n' },
        'secret': {
          type: 'dir',
          content: {
            'top_secret.txt': { type: 'file', content: 'I donÂ´t have any secret.\n' }
          }
        },
        'ideas': {
          type: 'dir',
          content: {
            'idea1.txt': { type: 'file', content: 'Thinking...\n' }
          }
        }
      }
    }
  };

  let currentPath = '/';

  input.addEventListener('keydown', function(e) {
    if (e.key === 'Enter') {
      const cmd = input.value.trim();
      output.innerHTML += `> ${cmd}\n`;
      input.value = '';
      handleCommand(cmd.toLowerCase());
    }
  });

  function handleCommand(cmd) {
    const args = cmd.split(' ');
    const command = args[0];
    const arg = args[1];

    switch (command) {
      case 'help':
        print(`Available commands:<dir>\nhelp   <--[show available commands]\nls   <--[list all files]\ncd   <--[switch between directories]\ncat   <--[displays file contents] <file>\nclear   <--[clear the terminal screen]\nexit   <--[exit the terminal screen] <dir>\nprojects   <--[redirect /projects section]\nblog   <--[redirect /blog section]\ncontact   <--[contact me via telegram]\n`);
        break;
      case 'ls':
        listDirectory();
        break;
      case 'cd':
        changeDirectory(arg);
        break;
      case 'cat':
        showFile(arg);
        break;
      case 'clear':
        output.innerHTML = '';
        break;
      case 'exit':
        output.innerHTML = '';
        break;
      case 'projects':
        print(`Redirecting to /projects...`);
        setTimeout(() => window.location.href = '/projects', 1000);
        break;
      case 'blog':
        print(`Redirecting to /blog...`);
        setTimeout(() => window.location.href = '/archives', 1000);
        break;
      case 'contact':
        print(`Reach me at: https://t.me/Yw4rf`);
        break;
      case '':
        break;
      default:
        print(`Command not found: ${cmd}`);
    }
    scrollToBottom();
  }

  function listDirectory() {
    const dir = getDir(currentPath);
    if (dir && dir.type === 'dir') {
      const names = Object.keys(dir.content).join('\t');
      print(names);
    } else {
      print('Invalid directory');
    }
  }

  function changeDirectory(dirName) {
    if (!dirName) {
      print('Usage: cd <directory>');
      return;
    }

    if (dirName === '..') {
      if (currentPath !== '/') {
        currentPath = currentPath.split('/').slice(0, -2).join('/') + '/';
        if (currentPath === '') currentPath = '/';
      }
    } else {
      const newPath = currentPath + (currentPath === '/' ? '' : '/') + dirName + '/';
      const dir = getDir(newPath);
      if (dir && dir.type === 'dir') {
        currentPath = newPath;
      } else {
        print(`No such directory: ${dirName}`);
      }
    }
  }

  function showFile(fileName) {
    if (!fileName) {
      print('Usage: cat <file>');
      return;
    }

    const dir = getDir(currentPath);
    if (dir && dir.type === 'dir') {
      const file = dir.content[fileName];
      if (file && file.type === 'file') {
        print(file.content);
      } else {
        print(`No such file: ${fileName}`);
      }
    }
  }

  function getDir(path) {
    const parts = path.split('/').filter(p => p);
    let dir = fileSystem['/'];
    for (let part of parts) {
      dir = dir.content[part];
      if (!dir || dir.type !== 'dir') return null;
    }
    return dir;
  }

  function print(text) {
    output.innerHTML += text + '\n';
  }

  function scrollToBottom() {
    output.scrollTop = output.scrollHeight;
  }
});
</script>